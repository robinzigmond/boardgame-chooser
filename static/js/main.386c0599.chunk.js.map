{"version":3,"sources":["components/SiteInfo.js","components/FailureMessage.js","components/ImportSelect.js","components/CustomCheckbox.js","components/CollectionInfo.js","components/Loader.js","components/CustomSelect.js","components/Pagination.js","components/FilterList.js","components/Tooltip.js","components/RecommendationList.js","components/Preferences.js","components/App.js","serviceWorker.js","index.js"],"names":["SiteInfo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","open","setState","_ref","react_default","a","createElement","Fragment","id","onClick","className","href","target","rel","Component","FailureMessage","text","duplicate","close","ImportSelect","loading","successMessage","data","length","htmlFor","type","name","onChange","handleChange","value","username","handleSubmit","CustomCheckbox","checked","CollectionInfo","handleWantImport","toggleRemoval","toDelete","showForm","found","findIndex","user","push","splice","_this2","map","idx","key","components_CustomCheckbox","includes","removeUsers","components_ImportSelect","handleUserNameChange","handleImportSubmit","Loader","classStr","concat","colour","CustomSelect","selectOption","e","dataset","updateParent","_this3","classes","options","find","opt","String","_ref2","data-value","Pagination","first","disabled","onFirst","prev","next","onLast","last","FilterList","updateFilters","getGames","itemNames","singularForms","categories","families","mechanics","prevProps","filterType","prevState","thisProps","Set","item","games","forEach","game","add","currentFlags","event","status","Array","from","sort","index","Tooltip","toolTip","React","createRef","current","style","right","xPos","bottom","yPos","_this$props$info","info","required","banned","ref","join","RecommendationList","gamesPerPage","lastPage","Math","ceil","handleMouseEnter","handleMouseLeave","container","page","tooltip","min","max","rating","precision","fallback","toFixed","filter","rect","getBoundingClientRect","filterInfo","flags","allFlags","keys","k","tooltipInfo","mouseX","width","pageX","left","window","scrollX","mouseY","height","pageY","top","scrollY","getInfo","sorting","gm","convertRating","yearpublished","stats","averageweight","ranks","slice","ratings","filters","currentFilter","used","some","flg","filterDisplay","onMouseEnter","onMouseLeave","components_Pagination","alt","src","thumbnail","showFilters","components_FilterList","components_Tooltip","Preferences","timePresets","mins","label","initialiseFlags","doFilters","handlePlayerCountChange","handleAvailableTimeChange","handleTimePresetChange","handleMinWeightChange","handleMaxWeightChange","handleOrderChange","playerCount","availableTime","gameOrder","showWeightFilters","minWeight","maxWeight","allGames","given","filteredGames","cb","arguments","undefined","itemName","filterName","flag","toConsumableArray","_loop","val","normaliseName","toLowerCase","replace","compareWithFallBack","compare","b","alphabeticalSort","aNormalised","tempArray","sortFunction","foundGames","minplayers","maxplayers","minplaytime","maxplaytime","Infinity","userToRate","ratingOrders","_this4","users","unshift","preset","components_CustomSelect","num","components_RecommendationList","numUsers","backendUrl","App","clearAndRemove","checkStatus","handleRequest","setRatings","getUserData","closeBox","tries","intervals","pendingRequests","meepleColours","randColour","floor","random","failure","showDuplicate","meepleColour","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","err","return","jobId","clearInterval","fetch","raw","json","res","result","failed","url","ok","setInterval","gameIdChunks","gamesToSearch","gamesArr","chunk","params","ratingInfo","ratedGame","defineProperty","chunks","arr","size","newChunk","shift","prevData","newGameIds","oldGames","oldGameIds","gamesToAdd","newGameIdChunks","oldGameIdChunks","asyncToGenerator","regenerator_default","mark","_callee4","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","wrap","_context4","sent","t0","finish","stop","updatedGames","preventDefault","_state$data","theUser","noMoreUsers","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","dataToUse","components_SiteInfo","components_FailureMessage","components_CollectionInfo","components_Loader","components_Preferences","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.386c0599.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass SiteInfo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n\r\n        this.state = {open: false};\r\n    }\r\n\r\n    toggle() {\r\n        this.setState(({open}) => ({open: !open}));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <button id=\"info\" onClick={this.toggle}>What is this?</button>\r\n                {this.state.open ? (\r\n                    <div className=\"site-info\">\r\n                        <p>\r\n                            You know how it is - it's game night, and you're sick of the traditional first game\r\n                            of the evening: the \"what game are we going to play?\" game.\r\n                        </p>\r\n                        <p>\r\n                            This site aims to speed up the process. Provided all games you have available to you\r\n                            are stored in one or more of your players' collections\r\n                            on <a href=\"https://boardgamegeek.com/\" target=\"_blank\" rel=\"noopener noreferrer\">BoardGameGeek</a>,\r\n                            you can import those collections just by entering the BGG username(s). Then all\r\n                            you need to do is specify how many players you have, and how long you want the\r\n                            game to take, and the site will show you exactly which games you have available\r\n                            that meet those needs.\r\n                        </p>\r\n                        <p>\r\n                            You'll probably still argue about what to play - but at least you'll be able to see\r\n                            all the options at a glance. There are also easy-to-use ways to reorder the list of\r\n                            games, and to filter them by various categories supplied by BGG - I hope these\r\n                            features may prove useful. \r\n                        </p>\r\n                        <p>\r\n                            Note that all data is simply that provided by BoardGameGeek - you can't expect me to\r\n                            manually provide data for tens of thousands of games and know how long a playtime they\r\n                            might all have! So please don't complain to me that\r\n                            7-player <a href=\"https://boardgamegeek.com/boardgame/102794/caverna-cave-farmers\" target=\"_blank\" rel=\"noopener noreferrer\">Caverna</a> can't\r\n                            possibly be played in an hour or less, or that it only\r\n                            suggests <a href=\"https://boardgamegeek.com/boardgame/98778/hanabi\" target=\"_blank\" rel=\"noopener noreferrer\">Hanabi</a> if\r\n                            you put exactly 25 minutes in. Complain to BGG, and see if it does you any good\r\n                            (unlikely) - it's nothing I can do anything about. (Although I certainly sympathise!)\r\n                        </p>\r\n                        <p>\r\n                            Made by Robin Zigmond, developer and boardgamer, please feel free to check out my profiles\r\n                            on <a href=\"https://boardgamegeek.com/user/robinz\" target=\"_blank\" rel=\"noopener noreferrer\">BGG</a> and <a href=\"https://github.com/robinzigmond\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>.\r\n                            If you find this useful, please spread the word, and don't be afraid to make\r\n                            suggestions (eg by private message on BGG) as to how to improve the site.\r\n                        </p>\r\n                        <button id=\"info-close\" onClick={this.toggle}>Close</button>\r\n                    </div>\r\n                ) : null}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SiteInfo;","import React, { Component } from 'react';\r\n\r\nclass FailureMessage extends Component {\r\n    render() {\r\n        let text;\r\n        if (this.props.duplicate) {\r\n            text = \"You've already got that user's collection imported!\";\r\n        }\r\n        else {\r\n            text = \"Failed to load - please check the username and try again!\";\r\n        }\r\n        return (\r\n            <div className=\"failure\">\r\n                <p>{text}</p>\r\n                <div className=\"close-box\" onClick={this.props.close}>X</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FailureMessage;\r\n","import React, { Component } from 'react';\r\n\r\nclass ImportSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {loading: false};\r\n    }\r\n\r\n    render() {\r\n        let successMessage;\r\n        if (this.state.data && !this.state.loading) {\r\n            if (this.state.data.length) {\r\n                successMessage = \"Collection successfully loaded!\";\r\n            }\r\n            else {\r\n                successMessage = \"Invalid username entered\";\r\n            }\r\n        }\r\n        return (\r\n            <form>\r\n                <div className=\"form-section\">\r\n                    <label htmlFor=\"bgg-username\">Enter a BGG username to import their collection:</label>\r\n                    <input type=\"text\" name=\"bgg-username\" onChange={this.props.handleChange} value={this.state.username}/>\r\n                    <button type=\"submit\" onClick={this.props.handleSubmit}>Go!</button>\r\n                </div>\r\n                {successMessage ? <p>{successMessage}</p> : null}\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ImportSelect;","import React, { Component } from 'react';\r\n\r\nclass CustomCheckbox extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <input type=\"checkbox\" value={this.props.value} onChange={this.props.handleChange}\r\n                    id={this.props.id} checked={this.props.checked}/>\r\n                <div className=\"custom-checkbox\">\r\n                    {this.props.checked ? \"\\u2713\" : \"\"}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CustomCheckbox;\r\n","import React, { Component } from 'react';\r\nimport ImportSelect from './ImportSelect.js';\r\nimport CustomCheckbox from './CustomCheckbox.js';\r\n\r\nclass CollectionInfo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleWantImport = this.handleWantImport.bind(this);\r\n        this.toggleRemoval = this.toggleRemoval.bind(this);\r\n\r\n        this.state = {toDelete: [], showForm: props.showForm};\r\n    }\r\n\r\n    handleWantImport() {\r\n        this.setState({showForm: true});\r\n    }\r\n\r\n    toggleRemoval(username) {\r\n        let found = this.state.toDelete.findIndex(user => user === username);\r\n        this.setState(state => {\r\n            let toDelete = state.toDelete;\r\n            if (found === -1) {\r\n                toDelete.push(username);\r\n            }\r\n            else {\r\n                toDelete.splice(found, 1);\r\n            }\r\n            return {toDelete};\r\n        });\r\n     }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"collection-info\">\r\n                {this.props.data.length\r\n                ? \r\n                <div className=\"form-section\">\r\n                    <p>Collections loaded for:</p>\r\n                    <ul>{this.props.data.map((username, idx)=>(\r\n                        <li key={idx}>\r\n                            <CustomCheckbox handleChange={() => this.toggleRemoval(username)}\r\n                            checked={this.state.toDelete.includes(username)} />\r\n                            <span>{username}</span>\r\n                        </li>\r\n                    ))}</ul>\r\n                    {this.state.toDelete.length ?\r\n                    <button onClick={() => this.props.removeUsers(this.state.toDelete)}>\r\n                    Remove selected collections</button>\r\n                    : null}\r\n                </div>\r\n                : <p>No collection data loaded yet</p>}\r\n                {this.state.showForm ?\r\n                <ImportSelect handleChange={this.props.handleUserNameChange}\r\n                handleSubmit={this.props.handleImportSubmit}/>\r\n                : \r\n                <div className=\"form-section\">\r\n                    <button onClick={this.handleWantImport}>Click to add a new collection</button>\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CollectionInfo;\r\n","import React, { Component } from 'react';\r\n\r\nclass Loader extends Component {\r\n    render() {\r\n        const classStr = `loader meeple-${this.props.colour}`\r\n        return (\r\n            <div className=\"loader-box\">\r\n                <div className={classStr}></div>\r\n                <p>Loading collection...</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Loader;","import React, { Component } from 'react';\r\n\r\nclass CustomSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.selectOption = this.selectOption.bind(this);\r\n\r\n        this.state = {value: this.props.value, open: false};\r\n    }\r\n\r\n    selectOption(e) {\r\n        let value = e.target.dataset.value;\r\n        this.setState({value, open: false}, () => this.props.updateParent(value));\r\n    }\r\n\r\n    render() {\r\n        let classes = \"custom-select\";\r\n        if (this.state.open) {\r\n            classes += \" open\";\r\n        }\r\n        return (\r\n            <div className={classes}>\r\n                <div className=\"select-main\" onClick={() => this.setState(({open}) => ({open: !open}))}>\r\n                    <p className=\"select-text\">\r\n                        {this.props.options.find(opt => String(opt.value) === String(this.state.value)).text}\r\n                    </p>\r\n                    <div className=\"select-arrow\">\r\n                        &#9660;\r\n                    </div>\r\n                </div>\r\n                <div className=\"select-body\">\r\n                    {this.props.options.map(({value, text}) => {\r\n                        let classes = \"select-option\";\r\n                        if (value === this.state.value) {\r\n                            classes += \" selected\";\r\n                        }\r\n                        return (\r\n                            <div key={value} className={classes} data-value={value} onClick={this.selectOption}>\r\n                                {text}\r\n                            </div>  \r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CustomSelect;","import React, { Component } from 'react';\r\n\r\nclass Pagination extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"pagination-buttons\">\r\n                <button onClick={this.props.first} disabled={this.props.onFirst}>|&lt;</button>\r\n                <button onClick={this.props.prev} disabled={this.props.onFirst}>&lt;</button>\r\n                <button onClick={this.props.next} disabled={this.props.onLast}>&gt;</button>\r\n                <button onClick={this.props.last} disabled={this.props.onLast}>&gt;|</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pagination;","import React, { Component } from 'react';\r\n\r\nclass FilterList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.updateFilters = this.updateFilters.bind(this);\r\n        this.getGames = this.getGames.bind(this);\r\n        this.state = {itemNames: []}\r\n\r\n        this.singularForms = {categories: \"category\", families: \"family\", mechanics: \"mechanic\"};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getGames(this.props);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.filterType !== this.props.filterType) {\r\n            this.getGames(this.props);\r\n        }\r\n    }\r\n\r\n    getGames(props) {\r\n        this.setState((prevState, thisProps) => {\r\n            let itemNames = new Set();\r\n            props.games.forEach(\r\n                (game) => {\r\n                    game[thisProps.filterType].forEach(\r\n                        (item) => {\r\n                            itemNames.add(item);\r\n                        }\r\n                    );\r\n                }\r\n            );\r\n            for (let item in props.currentFlags) {\r\n                if (props.currentFlags[item]) {\r\n                    itemNames.add(item);\r\n                }\r\n            }\r\n            return {itemNames};\r\n        });\r\n    }\r\n\r\n    updateFilters(event, name, status) {\r\n        if (event.target.checked) {\r\n            this.props.updateFilters(name, this.props.filterType, status);\r\n        }\r\n        else {\r\n            this.props.updateFilters(name, this.props.filterType);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"filter-list\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"close-box\" onClick={this.props.close}>X</div>\r\n                    <h3>Filter games by {this.singularForms[this.props.filterType]}</h3>\r\n                    {Array.from(this.state.itemNames).sort().map(\r\n                        (name, index) => (\r\n                            <div key={index} className=\"single-filter\">\r\n                                <span className=\"filter-name\">{name}</span>\r\n                                <div className=\"filter-checks\">\r\n                                    <label htmlFor={`${name}Required`}>Require</label>\r\n                                    <input type=\"checkbox\" name={`${name}Required`}\r\n                                    onChange={(event) => this.updateFilters(event, name, 1)}\r\n                                    checked={this.props.currentFlags[name] === 1} />\r\n                                    <label htmlFor={`${name}Banned`}>Remove</label>\r\n                                    <input type=\"checkbox\" name={`${name}Banned`}\r\n                                    onChange={(event) => this.updateFilters(event, name, -1)}\r\n                                    checked={this.props.currentFlags[name] === -1} />\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterList;","import React, { Component } from 'react';\r\n\r\nclass Tooltip extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toolTip = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.toolTip.current.style.right = this.props.xPos + \"px\";\r\n        this.toolTip.current.style.bottom = this.props.yPos + \"px\";\r\n    }\r\n\r\n    render() {\r\n        let {required, banned} = this.props.info;\r\n        return (\r\n            <div id=\"tooltip\" ref={this.toolTip}>\r\n                <div id=\"tooltip-body\">\r\n                    <p>\r\n                        {required.length ? (\r\n                            <span>\r\n                                <strong>Required: </strong>\r\n                                {required.join(\", \")}\r\n                            </span>\r\n                        ) : null}\r\n                        {required.length && banned.length ? \" \" : null}\r\n                        {banned.length ? (\r\n                            <span>\r\n                                <strong>Removed: </strong>\r\n                                {banned.join(\", \")}\r\n                            </span>\r\n                        ) : null}\r\n                    </p>\r\n                </div>\r\n                <div id=\"tooltip-arrow\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Tooltip;\r\n","import React, { Component } from 'react';\r\nimport Pagination from './Pagination.js';\r\nimport FilterList from './FilterList.js';\r\nimport Tooltip from './Tooltip.js';\r\n\r\nclass RecommendationList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.gamesPerPage = 20;\r\n        let lastPage = Math.ceil(this.props.games.length / this.gamesPerPage);\r\n\r\n        this.first = this.first.bind(this);\r\n        this.next = this.next.bind(this);\r\n        this.last = this.last.bind(this);\r\n        this.prev = this.prev.bind(this);\r\n        this.handleMouseEnter = this.handleMouseEnter.bind(this);\r\n        this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n\r\n        this.container = React.createRef();\r\n\r\n        this.state = {page: 1, lastPage, tooltip: false};\r\n    }\r\n\r\n    first() {\r\n        this.setState({page: 1});\r\n    }\r\n\r\n    next() {\r\n        this.setState(state => {\r\n            let nextPage = Math.min(state.page + 1, state.lastPage);\r\n            return {page: nextPage};\r\n        });\r\n    }\r\n\r\n    last() {\r\n        this.setState(state => ({page: state.lastPage}));\r\n    }\r\n\r\n    prev() {\r\n        this.setState(state => ({page: Math.max(1, state.page - 1)}));\r\n    }\r\n\r\n    convertRating(rating, precision, fallback) {\r\n        if (rating == null) {\r\n            return fallback || \"not rated\";\r\n        }\r\n        return (+rating).toFixed(precision)\r\n    }\r\n\r\n    handleMouseEnter(event, filter) {\r\n        let rect = this.container.current.getBoundingClientRect();\r\n        let filterInfo = this.props.flags[filter];\r\n        let allFlags = Object.keys(filterInfo);\r\n        let required = allFlags.filter(k => filterInfo[k] === 1);\r\n        let banned = allFlags.filter(k => filterInfo[k] === -1);\r\n        this.setState({tooltip: true, tooltipInfo: {required, banned},\r\n            mouseX: rect.width - event.pageX + rect.left + window.scrollX - 20,\r\n            mouseY: rect.height - event.pageY + rect.top + window.scrollY + 10});\r\n    }\r\n\r\n    handleMouseLeave() {\r\n        this.setState({tooltip: false, tooltipInfo: {}, mouseX: null, mouseY: null});\r\n    }\r\n\r\n    render() {\r\n        if (this.props.games.length) {\r\n            let getInfo;\r\n            switch (this.props.sorting) {\r\n                case \"alphabetical\":\r\n                    break;\r\n                case \"yearpublished\":\r\n                    getInfo = (gm => this.convertRating(gm.yearpublished, 0, \"unknown\"));\r\n                    break;\r\n                case \"weight\":\r\n                    getInfo = (gm => this.convertRating(gm.stats.averageweight, 2, \"not enough data\"));\r\n                    break;\r\n                case \"bggRank\":\r\n                    getInfo = (gm => this.convertRating(gm.stats.ranks[0].value, 0, \"not ranked\"));\r\n                    break;\r\n                default:\r\n                    // must be of the form \"ratingXXX\" where \"XXXX\" is the username\r\n                    let username = this.props.sorting.slice(6);\r\n                    getInfo = (gm => this.convertRating(gm.ratings[username], 1, \"not rated\"));\r\n            }\r\n            return (\r\n                <div className=\"game-list\" ref={this.container}>\r\n                    {this.props.games.length ? (\r\n                        <React.Fragment>\r\n                            <div className=\"filters\">\r\n                                <p>Filter results by:</p>\r\n                                <ul>\r\n                                    {this.props.filters.map((filter, index) => {\r\n                                            let currentFilter = this.props.flags[filter];\r\n                                            let used = currentFilter && Object.keys(currentFilter).some(\r\n                                                flg => currentFilter[flg] !== 0\r\n                                            );\r\n                                            return (\r\n                                                <li key={index}\r\n                                                className={\"filter-option\" + (used ? \" filter-used\" : \"\")}\r\n                                                onClick={() => this.props.filterDisplay(filter)}>\r\n                                                    <span onMouseEnter={used ? (e) => this.handleMouseEnter(e, filter) : null}\r\n                                                    onMouseLeave={used ? this.handleMouseLeave : null}>\r\n                                                        {filter}\r\n                                                    </span>\r\n                                                </li>\r\n                                            )\r\n                                        }\r\n                                    )}\r\n                                </ul>\r\n                            </div>\r\n                            <div>\r\n                                <h3>\r\n                                    Suitable Games\r\n                                    {this.state.lastPage > 1 ? ` - page ${this.state.page} of ${this.state.lastPage}` : null}\r\n                                </h3>\r\n                                {this.state.lastPage > 1 ? \r\n                                <Pagination first={this.first} next={this.next} prev={this.prev} last={this.last}\r\n                                onFirst={this.state.page === 1} onLast = {this.state.page === this.state.lastPage}/>\r\n                                : null}\r\n                                <div className=\"gamelist\">\r\n                                    {this.props.games.slice((this.state.page - 1) * this.gamesPerPage, this.state.page * this.gamesPerPage).map(game => (\r\n                                        <div className=\"game-info\" key={game.id}>\r\n                                            <a href={`https://boardgamegeek.com/boardgame/${game.id}`} target=\"_blank\"\r\n                                            rel=\"noopener noreferrer\">\r\n                                                <img alt={`${game.name}`} src={game.thumbnail} />\r\n                                                <h4>\r\n                                                    {game.name}\r\n                                                    {getInfo ? ` (${getInfo(game)})` : null}\r\n                                                </h4>\r\n                                            </a>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                                {this.state.lastPage > 1 ? \r\n                                <Pagination first={this.first} next={this.next} prev={this.prev} last={this.last}\r\n                                onFirst={this.state.page === 1} onLast = {this.state.page === this.state.lastPage}/>\r\n                                : null}\r\n                            </div>\r\n                        </React.Fragment>\r\n                    ) : <p>Unfortunately, none of your games fit the filters you've selected!</p>}\r\n                    {this.props.showFilters ?\r\n                    <FilterList games={this.props.games} updateFilters={this.props.updateFilters}\r\n                    currentFlags={this.props.flags[this.props.showFilters]}\r\n                    close={() => this.props.filterDisplay()}\r\n                    key={this.props.games.map(game=>game.id).join(\",\")}\r\n                    filterType={this.props.showFilters}/>\r\n                    : null}\r\n                    {this.state.tooltip ?\r\n                    <Tooltip info={this.state.tooltipInfo} xPos={this.state.mouseX} yPos={this.state.mouseY}/>\r\n                    : null}\r\n                </div>\r\n            )            \r\n        }\r\n        else {\r\n            return (\r\n                <p>Unfortunately, none of your games fit your criteria!</p>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default RecommendationList;","import React, { Component } from 'react';\r\nimport CustomCheckbox from './CustomCheckbox.js';\r\nimport CustomSelect from './CustomSelect.js';\r\nimport RecommendationList from './RecommendationList.js';\r\n\r\nclass Preferences extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.timePresets = [{mins: 30, label: \"Half an Hour\"},\r\n                            {mins: 60, label: \"1 Hour\"},\r\n                            {mins: 120, label: \"2 Hours\"},\r\n                            {mins: 180, label: \"3 Hours\"}];\r\n\r\n        this.filters = [\"categories\", \"families\", \"mechanics\"];\r\n        \r\n        this.initialiseFlags = this.initialiseFlags.bind(this);\r\n        this.updateFilters = this.updateFilters.bind(this);\r\n        this.doFilters = this.doFilters.bind(this);\r\n        this.filterDisplay = this.filterDisplay.bind(this);\r\n        this.handlePlayerCountChange = this.handlePlayerCountChange.bind(this);\r\n        this.handleAvailableTimeChange = this.handleAvailableTimeChange.bind(this);\r\n        this.handleTimePresetChange = this.handleTimePresetChange.bind(this);\r\n        this.handleMinWeightChange = this.handleMinWeightChange.bind(this);\r\n        this.handleMaxWeightChange = this.handleMaxWeightChange.bind(this);\r\n        this.handleOrderChange = this.handleOrderChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.state = {playerCount: 4, availableTime: 30,\r\n            gameOrder: \"alphabetical\", showWeightFilters: false,\r\n            minWeight: 1, maxWeight: 5, allGames: [],\r\n            given: false, filteredGames: [], flags: {}, showFilters: false};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initialiseFlags();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.gameOrder !== this.state.gameOrder\r\n            || prevState.minWeight !== this.state.minWeight\r\n            || prevState.maxWeight !== this.state.maxWeight) {\r\n            this.handleSubmit(false);\r\n        }\r\n    }\r\n\r\n    initialiseFlags(cb=null) {\r\n        let flags = {};\r\n        this.filters.forEach(filter => {\r\n            flags[filter] = {};\r\n        });\r\n        this.setState({flags}, cb);\r\n    }\r\n\r\n    updateFilters(itemName, filterName, flag=0) {\r\n        this.setState(state => {\r\n            let flags = state.flags;\r\n            flags[filterName][itemName] = flag;\r\n            return {flags, page: 1};\r\n        }, this.doFilters);\r\n    }\r\n\r\n    doFilters() {\r\n        // flag values: +1 - required, -1 - banned, 0 - neither\r\n        this.setState(state => {\r\n            let {flags} = state;\r\n            let filteredGames = [...state.allGames];\r\n\r\n            this.filters.forEach(filter => {\r\n                for (let item in flags[filter]) {\r\n                    switch(flags[filter][item]) {\r\n                        case 1:\r\n                            filteredGames = filteredGames.filter(game => game[filter].includes(item));\r\n                            break;\r\n                        case -1:\r\n                            filteredGames = filteredGames.filter(game => !game[filter].includes(item));\r\n                            break;\r\n                        case 0:\r\n                        default:\r\n                            break;                \r\n                    }\r\n                }\r\n            });\r\n            return {filteredGames};\r\n        });\r\n    }\r\n\r\n    filterDisplay(filter=false) {\r\n        this.setState({showFilters: filter});\r\n    }\r\n\r\n    handlePlayerCountChange(event) {\r\n        let val = event.target.value;\r\n        if (val === \"\") {\r\n            this.setState({playerCount: val})\r\n        }\r\n        else if (+val > 0) {\r\n            this.setState({playerCount: +val});\r\n        }\r\n    }\r\n\r\n    handleAvailableTimeChange(event) {\r\n        let val = event.target.value;\r\n        if (val === \"\") {\r\n            this.setState({availableTime: val})\r\n        }\r\n        else if (+val >= 0) {\r\n            this.setState({availableTime: +val});\r\n        }\r\n    }\r\n\r\n    handleTimePresetChange(event) {\r\n        if (event.target.checked) {\r\n            this.setState({availableTime: event.target.value});\r\n        }\r\n        else {\r\n            this.setState({availableTime: \"\"});\r\n        }\r\n    }\r\n\r\n    handleMinWeightChange(val) {\r\n        this.setState({minWeight: val});\r\n    }\r\n\r\n    handleMaxWeightChange(val) {\r\n        this.setState({maxWeight: val});\r\n    }\r\n\r\n    handleOrderChange(val) {\r\n        this.setState({gameOrder: val});\r\n    }\r\n\r\n    handleSubmit(clearFilters=true) {\r\n        function normaliseName(name) {\r\n            // function for comparing game names. We lowercase the name and strip off any leading \"the\" or \"a\"\r\n            // followed by spaces, as well as any leading non-alphanumeric characters\r\n            return name.toLowerCase().replace(/^(((the|a|an)\\s+)|[^A-Za-z0-9]+)/, \"\");\r\n        }\r\n\r\n        function compareWithFallBack(compare, fallback) {\r\n            // higher-order function which takes 2 comparison functions (functions of 2 variables which can be\r\n            // used as arguments to .sort), and sorts by the first one, but then by the second if they compare\r\n            // equal under the first\r\n            return (a, b) => compare(a, b) ? compare(a, b) : fallback(a, b);\r\n        }\r\n\r\n        function alphabeticalSort(a, b) {\r\n            // default sort function, to sort games alphabetically but ignoring initial \"the\", \"a\" and\r\n            // non-alphanumeric characters\r\n            let aNormalised = normaliseName(a.name);\r\n            let bNormalised = normaliseName(b.name);\r\n            let tempArray = [aNormalised, bNormalised];\r\n            tempArray.sort();\r\n            return 1 - 2*(tempArray[0] === aNormalised);\r\n            // (hacky shorthand to return -1 if the comparison is true and 1 if false)\r\n        }\r\n\r\n        if (clearFilters) {\r\n            this.initialiseFlags(() => this.handleSubmit(false));\r\n            return;   \r\n        }\r\n        if (this.state.playerCount && this.state.availableTime) {\r\n            this.setState((state, props) => {\r\n                let foundGames = props.data.filter(game =>\r\n                    game.minplayers <= state.playerCount\r\n                    && game.maxplayers >= state.playerCount\r\n                    && game.minplaytime <= state.availableTime\r\n                    && game.maxplaytime >= state.availableTime\r\n                    && game.stats.averageweight >= state.minWeight\r\n                    && game.stats.averageweight <= state.maxWeight);\r\n                let sortFunction;\r\n                switch(state.gameOrder) {\r\n                    case \"alphabetical\":\r\n                        sortFunction = alphabeticalSort;\r\n                        break;\r\n                    case \"yearpublished\":\r\n                        sortFunction = compareWithFallBack(\r\n                            (a,b) => ((a.yearpublished || Infinity) - (b.yearpublished || Infinity)),\r\n                            alphabeticalSort\r\n                        );\r\n                        break;\r\n                    case \"weight\":\r\n                        sortFunction = compareWithFallBack(\r\n                            (a,b) => ((a.stats.averageweight || Infinity) - (b.stats.averageweight || Infinity)),\r\n                            alphabeticalSort\r\n                        )\r\n                        break;\r\n                    case \"bggRank\":\r\n                        sortFunction = compareWithFallBack(\r\n                            (a,b) => ((a.stats.ranks[0].value || Infinity) - (b.stats.ranks[0].value || Infinity)),\r\n                            alphabeticalSort\r\n                        );\r\n                        break;\r\n                    default:\r\n                        let userToRate = this.state.gameOrder.slice(6);\r\n                        sortFunction = compareWithFallBack(\r\n                            (a,b) => ((b.ratings[userToRate] || 0) - (a.ratings[userToRate] || 0)),\r\n                            alphabeticalSort\r\n                        );\r\n                        break;\r\n                }\r\n                foundGames.sort(sortFunction);\r\n                return {\r\n                    given: true,\r\n                    allGames: foundGames\r\n                };\r\n            }, this.doFilters);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let ratingOrders;\r\n        let users = this.props.users;\r\n        if (users.length > 1){\r\n            ratingOrders = users.map(user => ({value: `rating${user}`, text: `${user}'s rating`}));\r\n        }\r\n        else {\r\n            ratingOrders = [{value: `rating${users[0]}`, text: \"My Rating\"}];\r\n        }\r\n        ratingOrders.unshift({value: \"alphabetical\", text: \"Name (alphabetical)\"},\r\n            {value: \"yearpublished\", text: \"Year published\"},\r\n            {value: \"weight\", text: \"Game weight (complexity)\"});\r\n        ratingOrders.push({value: \"bggRank\", text: \"BGG ranking list position\"});\r\n        return (\r\n            <div>\r\n                <div className=\"form-section\">\r\n                    <div className=\"input-block\">\r\n                        <label htmlFor=\"playerCount\">Number of Players</label>\r\n                        <input type=\"number\" name=\"playerCount\" id=\"playerCount\" value={this.state.playerCount} onChange={this.handlePlayerCountChange}/>\r\n                    </div>\r\n                    <div className=\"input-block\">\r\n                        <label htmlFor=\"availableTime\">Desired Playing Time (minutes)</label>\r\n                        <input type=\"number\" id=\"availableTime\" name=\"availableTime\" value={this.state.availableTime} onChange={this.handleAvailableTimeChange}/>\r\n                        <div>\r\n                            Or select:\r\n                            {this.timePresets.map(preset => (\r\n                                <div className=\"time-checkbox\" key={preset.mins}>\r\n                                    <label htmlFor={`timePreset${preset.mins}`}>{preset.label}:</label>\r\n                                    <CustomCheckbox value={preset.mins} handleChange={this.handleTimePresetChange}\r\n                                    id={`timePreset${preset.mins}`}\r\n                                    checked={+this.state.availableTime === preset.mins}/>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"input-block standalone\">\r\n                        <button type=\"button\" onClick={() => this.setState(state => ({showWeightFilters: !state.showWeightFilters}))}>\r\n                            {this.state.showWeightFilters ? \"Hide weight filters\" : \"Filter by weight (complexity)\"}\r\n                        </button>\r\n                    </div>\r\n                    {this.state.showWeightFilters ?\r\n                    <div className=\"input-block mini-select\">\r\n                        <p className=\"select-label\">Minimum game weight:</p>\r\n                        <CustomSelect options={[1,2,3,4,5].filter(num => num < this.state.maxWeight)\r\n                        .map(num => ({value: num, text: num}))} value={this.state.minWeight}\r\n                        updateParent={this.handleMinWeightChange}/>\r\n                        <p className=\"select-label\">Maximum game weight:</p>\r\n                        <CustomSelect options={[1,2,3,4,5].filter(num => num > this.state.minWeight)\r\n                        .map(num => ({value: num, text: num}))} value={this.state.maxWeight}\r\n                        updateParent={this.handleMaxWeightChange}/>\r\n                    </div>\r\n                    : null }\r\n                    <div className=\"input-block\">\r\n                        <p className=\"select-label\">Order results by:</p>\r\n                        <CustomSelect options={ratingOrders} value={ratingOrders[0].value}\r\n                        updateParent={this.handleOrderChange}/>\r\n                    </div>\r\n                    <div className=\"input-block\">\r\n                        <button type=\"button\" onClick={() => this.handleSubmit()}>\r\n                            {this.state.given ? \"Update\" : \"Get\"} recommendations!\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                {this.state.given ?\r\n                <RecommendationList games={this.state.filteredGames}\r\n                key={this.state.filteredGames.map(game => game.id).join(\",\")} sorting={this.state.gameOrder}\r\n                numUsers={this.props.users.length} filters={this.filters} flags={this.state.flags}\r\n                updateFilters={this.updateFilters} showFilters={this.state.showFilters}\r\n                filterDisplay={this.filterDisplay}/>\r\n                : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Preferences;","import React, { Component } from 'react';\nimport '../App.css';\nimport SiteInfo from './SiteInfo.js';\nimport FailureMessage from './FailureMessage.js';\nimport CollectionInfo from './CollectionInfo.js';\nimport Loader from './Loader.js';\nimport Preferences from './Preferences.js';\n\nconst backendUrl = \"https://wgtp-backend.herokuapp.com\";\nconst poll_interval = 5000;\nconst max_tries = 20;\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleUserNameChange = this.handleUserNameChange.bind(this);\n        this.clearAndRemove = this.clearAndRemove.bind(this);\n        this.checkStatus = this.checkStatus.bind(this);\n        this.handleRequest = this.handleRequest.bind(this);\n        this.handleImportSubmit = this.handleImportSubmit.bind(this);\n        this.setRatings = this.setRatings.bind(this);\n        this.getUserData = this.getUserData.bind(this);\n        this.closeBox = this.closeBox.bind(this);\n        this.removeUsers = this.removeUsers.bind(this);\n\n        this.tries = 0;\n        this.intervals = {};\n        // used to track whether any more Ajax requests need to be made, while importing a user's collection\n        this.pendingRequests = false;\n        this.meepleColours = [\"red\", \"yellow\", \"green\", \"blue\"];\n\n        let randColour = this.meepleColours[Math.floor(Math.random()*this.meepleColours.length)];\n\n        this.state = {username: \"\", data: {games: [], users: []}, failure: false, showDuplicate: false,\n            loading: false, meepleColour: randColour};\n    }\n\n    componentWillUnmount() {\n        for (let id of this.intervals) {\n            this.clearAndRemove(id);\n        }\n    }\n\n    handleUserNameChange(event) {\n        this.setState({username: event.target.value});\n    }\n\n    clearAndRemove(jobId) {\n        clearInterval(this.intervals[jobId]);\n        delete this.intervals[jobId];\n    }\n\n    async checkStatus(id, cb) {\n        this.tries++;\n        let raw = await fetch(`${backendUrl}/result/${id}`);\n        let res = await raw.json();\n        if (res.done) {\n            this.clearAndRemove(id);\n            this.tries = 0;\n            cb(res.result);\n\n            // only remove the loader when we know no more Ajax requests will be sent out,\n            // and there are no jobs still pending\n            if (!this.pendingRequests && !Object.keys(this.intervals).length) {\n                this.setState({loading: false});\n            }\n        }\n        else if (res.failed || (this.tries >= max_tries)) {\n            this.clearAndRemove(id);\n            this.tries = 0;\n            this.setState({failure: true, loading: false});\n            this.pendingRequests = false;\n        }\n    }\n\n    async handleRequest(url, cb) {\n        let raw = await fetch(url);\n        if (!raw.ok) {\n            this.setState({failure: true, loading: false});\n            this.pendingRequests = false;\n        }\n        let json = await raw.json();\n        let id = json[\"job_id\"];\n        this.intervals[id] = setInterval(() => this.checkStatus(id, cb), poll_interval);\n    }\n\n    async setRatings(user, gameIdChunks, gamesToSearch) {\n        let gamesArr = [...gamesToSearch];\n        for (let chunk of gameIdChunks) {\n            let params = chunk.map(String).join(\"-\");\n            await this.handleRequest(`${backendUrl}/check_ratings/${user}/${params}`,\n                ratingInfo => {\n                for (let id in ratingInfo) {\n                    if (ratingInfo[id] !== null) {\n                        let ratedGame = gamesArr.find(gm => gm.id === +id);\n                        if (ratedGame) {\n                            if (ratedGame.ratings) {\n                                ratedGame.ratings[user] = ratingInfo[id];\n                            }\n                            else {\n                                ratedGame.ratings[user] = {[user]: ratingInfo[id]};\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        return gamesArr;\n    }\n\n    async getUserData() {\n        this.handleRequest(`${backendUrl}/collection/${this.state.username}`, data => {\n            this.setState(state => {\n                if (data && data.length) {\n                    this.pendingRequests = true;\n                    let prevData = {games: [...state.data.games],\n                        users: [...state.data.users]};\n                    prevData.users.push(state.username);\n                    let newGameIds = data.map(game => game.id);\n                    // split ids into chunks, to completely avoid URL character limits in the API call\n                    const chunkSize = 200;\n                    function chunks(arr, size) {\n                        let chunks = [];\n                        while (arr.length > 0) {\n                            let newChunk = [];\n                            while (newChunk.length < size && arr.length > 0) {\n                                newChunk.push(arr.shift());\n                            }\n                            chunks.push(newChunk);\n                        }\n                        return chunks;            \n                    }\n        \n                    let oldGames = prevData.games;\n                    let oldGameIds = oldGames.map(game => game.id);\n                    let gamesToAdd = data.filter(game => !oldGameIds.includes(game.id));\n        \n                    let newGameIdChunks = chunks(newGameIds, chunkSize);\n                    let oldGameIdChunks = chunks(oldGameIds, chunkSize);\n        \n                    (async () => {\n                        // first loop through all existing users and find if they've rated any of the new games\n                        for (let user of prevData.users) {\n                            gamesToAdd = await this.setRatings(user, newGameIdChunks, gamesToAdd);\n                        }\n        \n                        // then, conversely, add the new user's ratings for all games already in collection\n                        oldGames = await this.setRatings(this.state.username, oldGameIdChunks, oldGames);\n\n                        // no more requests will be sent out\n                        this.pendingRequests = false;\n                    })()\n\n                    let updatedGames = oldGames.concat(gamesToAdd);\n        \n                    // finally,\n                    // 1) add the username to the \"users\" property of each game object, for the games just added\n                    // 2) make sure each game has a \"ratings\" property\n                    updatedGames.forEach(game => {\n                        if (!game.users) {\n                            game.users = [];\n                        }\n                        if (data.map(gm => gm.id).includes(game.id)) {\n                            game.users.push(this.state.username);\n                        }\n                        if (!game.ratings) {\n                            game.ratings = {};\n                        }\n                    });\n                    return {data: {users: prevData.users, games: updatedGames}};\n                }\n                else {\n                    return {failure: true, loading: false};\n                }\n            });\n        });\n    }\n\n    async handleImportSubmit(e) {\n        e.preventDefault();\n        if (this.state.data.users.includes(this.state.username)) {\n            this.setState({showDuplicate: true});\n        }\n        else {\n            let randColour = this.meepleColours[Math.floor(Math.random()*this.meepleColours.length)];\n            this.setState({loading: true, failure: false, meepleColour: randColour}, this.getUserData);\n        }\n    }\n\n    closeBox() {\n        if (this.state.showDuplicate) {\n            this.setState({failure: false, showDuplicate: false, username: \"\"});\n        }\n        else {\n            this.setState({failure: false, showDuplicate: false});\n        }\n    }\n\n    removeUsers(toDelete) {\n        this.setState(state => {\n            let {users, games} = state.data;\n            toDelete.forEach(user => {\n                if (users.includes(user)) {\n                    let idx = users.findIndex(theUser => theUser === user);\n                    users.splice(idx, 1);\n                }\n            });\n            let noMoreUsers = [];\n            games.forEach(game => {\n                game.users = game.users.filter(user => !toDelete.includes(user));\n                for (let user of toDelete) {\n                    if (Object.keys(game.users).includes(user)) {\n                        delete game.users[user];\n                    }\n                }\n                if (!game.users.length) {\n                    noMoreUsers.push(game.id);\n                }\n            });\n            games = games.filter(game => !noMoreUsers.includes(game.id));\n            return {data: {users, games}};\n        });\n    }\n\n    render() {\n        let dataToUse = this.state.data.games.filter(game => game.users.length);\n        return (\n            <div className=\"App\">\n                <h1>Find a boardgame to play!</h1>\n                <h4>Import your BGG collection, give your preferences and get instant recommendations</h4>\n                <SiteInfo/>\n                {this.state.failure ? <FailureMessage close={this.closeBox} /> : null}\n                {this.state.showDuplicate ? <FailureMessage close={this.closeBox} duplicate={true} /> : null}\n                <CollectionInfo data={this.state.data.users} showForm={!this.state.data.users.length}\n                handleUserNameChange={this.handleUserNameChange} handleImportSubmit={this.handleImportSubmit}\n                removeUsers={this.removeUsers} key={this.state.data.users} />\n                {this.state.loading ? <Loader colour={this.state.meepleColour}/> : null}\n                {!this.state.loading && this.state.data.games.length ?\n                <Preferences key={dataToUse.length} data={dataToUse} users={this.state.data.users} /> : null}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}